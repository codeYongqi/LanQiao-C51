C51 COMPILER V9.54   TEST                                                                  08/15/2020 16:14:21 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE TEST
OBJECT MODULE PLACED IN .\Objects\test.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE test.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\test.ls
                    -t) TABS(2) OBJECT(.\Objects\test.obj)

line level    source

   1          
   2          #include "reg52.h"
   3          #include "absacc.h"
   4          #include "iic.h"
   5           
   6          sbit S5 = P3^2;
   7          sbit S4 = P3^3;
   8           
   9          unsigned char dat_rd1 = 0;    //????????
  10          unsigned char level = 0;    //????????
  11          unsigned char bak_level = 0;  //????????
  12          unsigned char bak_rd1 = 0;    //????????
  13           
  14          //?????????
  15          unsigned char code SMG_duanma[18]=
  16              {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,
  17               0x88,0x80,0xc6,0xc0,0x86,0x8e,0xbf,0x7f};
  18          //???????
  19          void DelaySMG(unsigned int t)
  20          {
  21   1        while(t--);
  22   1      }
  23          /*=====================?????????=====================*/
  24          void DisplaySMG_Bit(unsigned char pos, unsigned char value)
  25          {
  26   1        XBYTE[0xE000] = 0xFF;       //??
  27   1        XBYTE[0xC000] = 0x01 << pos;    //????????
  28   1        XBYTE[0xE000] = value;        //??????????
  29   1      }
  30           
  31          /*=====================?????????=====================*/
  32          void Display_now()
  33          {
  34   1        DisplaySMG_Bit(0, SMG_duanma[16]);      
  35   1        DelaySMG(500);
  36   1        DisplaySMG_Bit(1, SMG_duanma[level]);
  37   1        DelaySMG(500);
  38   1        DisplaySMG_Bit(2, SMG_duanma[16]);
  39   1        DelaySMG(500);
  40   1            
  41   1        DisplaySMG_Bit(3, 0xFF);
  42   1        DelaySMG(500);
  43   1        DisplaySMG_Bit(4, 0xFF);
  44   1        DelaySMG(500);
  45   1        
  46   1        DisplaySMG_Bit(5, SMG_duanma[dat_rd1 / 100]);
  47   1        DelaySMG(500);
  48   1        DisplaySMG_Bit(6, SMG_duanma[(dat_rd1 % 100) / 10]);
  49   1        DelaySMG(500);
  50   1        DisplaySMG_Bit(7, SMG_duanma[dat_rd1 % 10]);
  51   1        DelaySMG(500);
  52   1      }
  53           
  54          /*=====================?????????=====================*/
C51 COMPILER V9.54   TEST                                                                  08/15/2020 16:14:21 PAGE 2   

  55          void Display_old()
  56          {
  57   1        DisplaySMG_Bit(0, SMG_duanma[16]);
  58   1        DelaySMG(500);
  59   1        DisplaySMG_Bit(1, SMG_duanma[bak_level]);
  60   1        DelaySMG(500);
  61   1        DisplaySMG_Bit(2, SMG_duanma[16]);
  62   1        DelaySMG(500);
  63   1            
  64   1        DisplaySMG_Bit(3, 0xFF);
  65   1        DelaySMG(500);
  66   1        DisplaySMG_Bit(4, 0xFF);
  67   1        DelaySMG(500);
  68   1        
  69   1        DisplaySMG_Bit(5, SMG_duanma[bak_rd1 / 100]);
  70   1        DelaySMG(500);
  71   1        DisplaySMG_Bit(6, SMG_duanma[(bak_rd1 % 100) / 10]);
  72   1        DelaySMG(500);
  73   1        DisplaySMG_Bit(7, SMG_duanma[bak_rd1 % 10]);
  74   1        DelaySMG(500);
  75   1      }
  76           
  77          /*===================??PCF8591??1???===================*/
  78          void Read_RD1()
  79          {
  80   1        IIC_Start();          //????
  81   1        IIC_SendByte(0x90);       //?????
  82   1        IIC_WaitAck();          //????
  83   1        IIC_SendByte(0x01);       //???????
  84   1        IIC_WaitAck();          //????
  85   1        IIC_Stop();           //????
  86   1        
  87   1        IIC_Start();          //????
  88   1        IIC_SendByte(0x91);       //?????
  89   1        IIC_WaitAck();            //????
  90   1        dat_rd1 = IIC_RecByte();      //??????1???
  91   1                //???????
  92   1        IIC_Stop();           //????
  93   1      }
  94           
  95          /*======================????????======================*/
  96          void Right_Auto()
  97          {
  98   1        Read_RD1();           //???????????
  99   1        if(dat_rd1 > 200)       //??1
 100   1        {
 101   2          XBYTE[0x8000] = 0xfe;   //??L1
 102   2          level = 1;
 103   2        }
 104   1        else if(dat_rd1 > 150)        //??2
 105   1        {
 106   2          XBYTE[0x8000] = 0xfc;   //??L1~L2
 107   2          level = 2;
 108   2        }
 109   1        else if(dat_rd1 > 100)        //??3
 110   1        {
 111   2          XBYTE[0x8000] = 0xf0;   //??L1~L4
 112   2          level = 3;
 113   2        }
 114   1        else if(dat_rd1 > 50)     //??4
 115   1        {
 116   2          XBYTE[0x8000] = 0xc0;   //??L1~L6
C51 COMPILER V9.54   TEST                                                                  08/15/2020 16:14:21 PAGE 3   

 117   2          level = 4;
 118   2        }
 119   1        else              //??5
 120   1        {
 121   2          XBYTE[0x8000] = 0x00;   //??L1~L8
 122   2          level = 5;
 123   2        }
 124   1      }
 125           
 126          /*=======================24C02?????=======================*/
 127          void Write_24C02(unsigned char addr, unsigned char dat)
 128          {
 129   1        IIC_Start();          //????          
 130   1        IIC_SendByte(0xa0);       //?????
 131   1        IIC_WaitAck();          //????
 132   1        IIC_SendByte(addr);       //????????
 133   1        IIC_WaitAck();          //????
 134   1        IIC_SendByte(dat);        //??????
 135   1        IIC_WaitAck();          //????
 136   1        IIC_Stop();           //????
 137   1      }
 138           
 139          /*=======================24C02?????=======================*/
 140          unsigned char Read_24C02(unsigned char addr)
 141          {
 142   1        unsigned char tmp;
 143   1        IIC_Start();          //????      
 144   1        IIC_SendByte(0xa0);       //?????
 145   1        IIC_WaitAck();          //????
 146   1        IIC_SendByte(addr);       //????????
 147   1        IIC_WaitAck();          //????
 148   1       
 149   1        IIC_Start();          //????
 150   1        IIC_SendByte(0xa1);       //?????
 151   1        IIC_WaitAck();          //????
 152   1        tmp = IIC_RecByte();      //??????
 153   1                //???????
 154   1        IIC_Stop();           //????
 155   1        return tmp;
 156   1      }
 157           
 158          /*=======================????????=======================*/
 159          void Scan_Keys()
 160          {
 161   1        if(S4 == 0)               
 162   1        {
 163   2          DelaySMG(100);
 164   2          if(S4 == 0)
 165   2          {
 166   3            //???????????????????24C02???
 167   3            Write_24C02(0x01, level);
 168   3            DelaySMG(1000);       //????????
 169   3            Write_24C02(0x02, dat_rd1);
 170   3            
 171   3            while(S4 == 0)
 172   3            {
 173   4              Display_now();      //?????????????
 174   4            }
 175   3          }
 176   2        }
 177   1        if(S5 == 0)
 178   1        {
C51 COMPILER V9.54   TEST                                                                  08/15/2020 16:14:21 PAGE 4   

 179   2          DelaySMG(100);
 180   2          if(S5 == 0)
 181   2          {
 182   3            //??24C02??????
 183   3            bak_level = Read_24C02(0x01);
 184   3            bak_rd1 = Read_24C02(0x02);
 185   3            while(S5 == 0)
 186   3            {
 187   4              Display_old();    //?S5?????,??????
 188   4            }
 189   3          }
 190   2        }
 191   1      }
 192          /*============================???============================*/
 193          void main()
 194          {
 195   1        while(1)
 196   1        {
 197   2          Right_Auto();     //?????????????
 198   2          Display_now();      //???????
 199   2          Scan_Keys();      //??????
 200   2        }
 201   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    525    ----
   CONSTANT SIZE    =     18    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
